const perricosArray = []; //Un array que almacenar치 las URL de las im치gens de perros para renderizarlas en la p치gina

//const votesArray = [];


console.log(perricosArray);

// addPerrico();

const dogList = document.querySelector('#dog-list'); //modifica por id el div con id dog-list
//doglist es una variable que selecciona el elemento HTML con el ID dog-list. Este es el contenedor donde se insertaran las tarjetas de los perros

//funci칩n que agrega eventos a los botones Precioso y fe칤simo
function addSocialListeners(){

 // Funci칩n para los votos positivos: para cada bot칩n de precioso, se a침ade un eventListener, busca al hermano anterior y le suma 1 
document.querySelectorAll('.like').forEach((buttonNode) => { //selecci칩na todos los botones con la clase like
    buttonNode.addEventListener('click', function () { //al hacer click busca el elemento anterior (el contador de likes) e incrementa el n칰mero mostrado en el span .like-count
        console.log('me gusta clickado');
        const hermanico = buttonNode.previousElementSibling;
        const likeCountNode = hermanico.querySelector('.like-count'); //selecciona el elemento del html span con la class 'like-count'
        likeCountNode.innerText = Number(likeCountNode.innerText) + 1  //y al elemento con class -like-count, le suma 1.
    });
});

//Funci칩n para los votos negarivos
document.querySelectorAll('.dislike').forEach((buttonNode) => { //buttonNode es el bot칩n en el que se hace clic (.like o .dislike).
    buttonNode.addEventListener('click', function () {         //previousElementSibling accede al contenedor inmediatamente anterior (el que contiene los contadores like-count o dislike-count).
        console.log('me gusta clickado');
        const hermanico = buttonNode.previousElementSibling;
        const dislikeCountNode = hermanico.querySelector('.dislike-count');
        dislikeCountNode.innerText = Number(dislikeCountNode.innerText) + 1
    });
});
}

/* Al hacer clic en el bot칩n "Precioso":

buttonNode se refiere al bot칩n <button class="like">Precioso</button>.
buttonNode.previousElementSibling se refiere al p치rrafo <p>游땘 <span class="like-count"></span></p>, que contiene el contador.
Este acceso permite que luego se obtenga el elemento <span> dentro de ese p치rrafo y se incremente su contenido:

const likeCountNode = hermanico.querySelector('.like-count');
likeCountNode.innerText = Number(likeCountNode.innerText) + 1; */

/* previousElementSibling es una forma de navegar en el DOM para encontrar el hermano HTML anterior del elemento actual.
En este caso, se usa para identificar el contenedor de los contadores relacionados con el bot칩n que fue clicado, permitiendo modificar sus valores.
 */


//esta funci칩n se encarga de a침adir las cards de perritos

function renderPerrico(dogImage){ //recibe la URL de la imagen de perro
    //crea la tarjeta del perro con la imagen, botones y contadores de votos
    const htmlAdd =
    `<div class="dogCard" >
        <img class="image" id="perro" alt="imagen de perro" src="${dogImage}">
        <div class="cardVote" > 
            <div class="voteCard">
                <p>游땘 <span class="like-count"></span></p>
                <button class="like">Precioso</button> 
            </div>
            <div class="voteCard">
                <p>游뱍 <span class="dislike-count"></span></p>
                <button class="dislike">Fe칤simo</button>
            </div>
        </div>
    </div>`;
    //se inserta en el contenedor #dog-list usando innerHTML
    document.querySelector('#dog-list').innerHTML += htmlAdd;

}


function renderPerricoArray(){
    dogList.innerHTML = ''; // Limpiar el contenido de la lista de perros

    perricosArray.forEach((dogImage)=>{ //itera sobre perricosArray y renderiza todas las im치genes
        //const votes = votesArray[index] || {precioso:0, feisimo:0}; //inicializamos votos si no existen
        renderPerrico(dogImage);
        console.log('innerHtml posici칩n', index, dogList.innerHTML);
    });

    addSocialListeners(); //llama a addSocialListeners para que los nuevos botones funcionen
}


// Funci칩n para agregar un perrico aleatorio al array, llama a la funci칩n d la API para obtener una URL del perro
const addPerrico = async ()=>{
    const perricoImg = await getRandomDogImage(); //la funci칩n getRandomDogImage se declara en el archivo api.js
    console.log(perricoImg);
    perricosArray.push(perricoImg); //a침ad la url al array perricosArray y la renderiza en la p치gina con la funci칩n renderPerrico
    renderPerrico(perricoImg); // Re-renderizar la lista con la nueva imagen
    addSocialListeners(); //activa los eventos
};

// Funci칩n para agregar 5 perricos: definimos una funci칩n as칤ncrona con un for que no dejar치 de ejecutarse hasta que i > 5, es decir que pushee al array perricosArrar 5 im치genes random
const add5Perricos = async () => {
    for (let i = 0; i < 5; i++) {
        addPerrico(); 
    }
    addSocialListeners(); //activa los eventos
};

// Renderizar los perricos al cargar la p치gina
// renderPerricoArray(); //esto hace que la p치gina tenga de primeras imagenes con perritos y no queremos eso, queremos que la p치gina no tenga ning칰n perrito 

//Listeners para los botones de a침adir perritos

// Agregar evento al bot칩n "A침adir 1 perrico m치s"
document.querySelector('#add-1-perrico').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    addPerrico();
});

// Agregar evento al bot칩n "A침adir 5 perricos m치s"
document.querySelector('#add-5-perrico').addEventListener('click', function(event){
    event.preventDefault(); // Evitar el env칤o del formulario
    add5Perricos();
});

